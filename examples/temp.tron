(defn print (x)
   (console/log x)
)

(deftype Point (x y)
   (set! this/x x)
   (set! this/y y)
)

(set! Point/prototype
   (object!
      (defn to-string ()
         (+ "point(" this/x ", " this/y ")")
      )
   )
)

(let ((p (new Point 1 2)))
   (print p)
  
   (when (object? p)
      (print "This is an object")
   )
  
   (console/log (p/to-string))
)

(let ([loop-count 100])
   (while (> loop-count 0)
      (console/log (+ "loop-count: " loop-count))

      (set! loop-count (- loop-count 1))
   )
)

(for 
   ([for-loop-count 10])
   (> for-loop-count 0)
   (set! for-loop-count (- for-loop-count 1))
  
   (console/log (+ "for-loop-count: " for-loop-count))
)