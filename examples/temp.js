// Code generated from Tron Language
"use strict";
function TronChar(value){return (this.value = value);};
function TronSymbol(value){return (this.value = value);};
function TronKeyword(value){return (this.value = value);};
function TronComplex(real,imag){return (this.real = real,this.imag = imag);};
function null$04$(x){return ((("null" == typeof(x)) || ("undefined" == typeof(x))));};
function empty$04$(x){return ((!(x.length) || (x.length <= 0)));};
function char$04$(x){return ((x instanceof TronChar));};
function number$04$(x){return (("number" == typeof(x)));};
function object$04$(x){return ((typeof(x) == "object"));};
function string$04$(x){return (("string" == typeof(x)));};
function symbol$04$(x){return ((x instanceof TronSymbol));};
function keyword$04$(x){return ((x instanceof TronKeyword));};
function string$00$$10$symbol(x){return (new TronSymbol(x));};
function string$00$$10$keyword(x){return (new TronKeyword(x));};
function symbol$00$$10$string(x){return (x.value);};
function keyword$00$$10$string(x){return (x.value);};
;
;
;
;
(("undefined" == typeof(module))?(window$17$module = {},window$17$module$17$export = {}):false);
;
function print(x){return ((console.log)(x));};
function Point(x,y){return (this.x = x,this.y = y);};
Point.prototype = {to$00$string:function (){return (("point(" + this.x + ", " + this.y + ")"));}};
(function (p){return ((print)(p),((object$04$)(p)?((print)("This is an object")):false),(console.log)((p.to$00$string)()));})(new Point(1,2));
(function (loop$00$count){return ((function() { var __r78; while ((loop$00$count > 0)) __r78 = ((console.log)(("loop-count: " + loop$00$count)),loop$00$count = (loop$00$count - 1)); return __r78;})());})(100);
(function (for$00$loop$00$count,__r79){return ((function() { var __r80; while ((for$00$loop$00$count > 0)) __r80 = (__r79 = ((console.log)(("for-loop-count: " + for$00$loop$00$count))),for$00$loop$00$count = (for$00$loop$00$count - 1),__r79); return __r80;})());})(10,false);
