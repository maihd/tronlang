;;
;; Tronlang Standard library
;;

(deftype %tron-symbol (value)
  (set! this.value value))

(deftype %tron-keyword (value)
  (set! this.value value))

(defn null? (x)
  (or (== "null" (typeof x)) (== "undefined" (typeof x))))

(defn number? (x)
  (== "number" (typeof x)))

(defn string? (x)
  (== "string" (typeof x)))

(defn symbol? (x)
  (instanceof x %tron-symbol))

(defn keyword? (x)
  (instanceof x %tron-keyword))

(defn string->symbol (x)
  (new %tron-symbol x))

(defn string->keyword (x)
  (new %tron-keyword x))

(defn symbol->string (x)
  (new %tron-symbol x))

(defn keyword->string (x)
  (new %tron-keyword x))

;;
;; Standard macro
;;

(defmacro when (condition . body)
  `(if ((not ,condition)
        ,@body)))

(defmacro unless (condition . body)
  `(if ((not ,condition)
        ,@body)))

;;
;; Node module support
;;

(if ((== "undefined" (typeof module))
     (set! window.module (object!))
     (set! window.module.exporst (object!))))

(defmacro export (name body)
  (unless (symbol? name)
    (error "export name must be a symbol"))
  `(set! (get! module ,(string->keyword (symbol->string name)))
     ,body))
