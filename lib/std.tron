;;
;; Tronlang Standard library
;;

(deftype TronChar [value]
   (set! this/value value)
)

(deftype TronSymbol [value]
   (set! this/value value)
)

(deftype TronKeyword [value]
   (set! this/value value)
)

(deftype TronComplex [real imag]
   (set! this/real real)
   (set! this/imag imag)
)

(defn null? [x]
   (or (== "null" (typeof x)) (== "undefined" (typeof x)))
)

(defn empty? [x]
   (or (not x/length) (<= x/length 0))
)

(defn char? [x]
   (instanceof x TronChar)
)

(defn number? [x]
   (== "number" (typeof x))
)

(defn object? (x)
   (== (typeof x) "object")
)

(defn string? [x]
   (== "string" (typeof x))
)

(defn symbol? [x]
   (instanceof x TronSymbol)
)

(defn keyword? [x]
   (instanceof x TronKeyword)
)

(defn string->symbol [x]
   (new TronSymbol x)
)

(defn string->keyword [x]
   (new TronKeyword x)
)

(defn symbol->string [x]
   x/value
)

(defn keyword->string [x]
   x/value
)

;;
;; Standard macro
;;

(defmacro cond [(first-clause #false) . clauses]
   (cond
      [(not first-clause) #f]
      [(empty? clauses) first-clause]
      [else
         (let ([var (gensym)])
            `(let ([,var ,first-clause])
               (if ,var ,var (or ,clauses))
            )
         )
      ]   
   )
)

(defmacro when [condition . body]
   `(if ,condition (progn ,@body) #false)
)

(defmacro unless [condition . body]
   `(if (not ,condition) (progn ,@body) #false)
)

(defmacro for [init condition increment . body]
   (let ((result-variable (gensym "__r")))
      `(let ,(append init (list (list result-variable #f)))
         (while ,condition 
         (set! ,result-variable (progn ,@body))
         ,increment
         ,result-variable
         )
      )
   )
)

;;
;; Node module support
;;

(when (== "undefined" (typeof module))
   (set! window.module (object!))
   (set! window.module.export (object!))
)

(defmacro export [name body]
   (unless (symbol? name)
      (error "export name must be a symbol")
   )

   `(set! (get! module ,(string->keyword (symbol->string name)))
      ,body
   )
)
